#Python has a built-in package called json, which can be used to work with JSON data.
import json

#f you have a JSON string, you can parse it by using the json.loads() method.

#some json

d ='{"name": "amulya", "age": "10", "country": "america"}'
y = json.loads(d)
print(y["age"])

#If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.

d = {
  "name": "amulya",
  "age": "10",
  "country": "america"
}

y = json.dumps(d)

print(y)
print(json.dumps({"name": "Amulya", "age": "10", "country": "america"}))
print(json.dumps(["apple", "bananas"]))
print(json.dumps(("apple", "bananas")))
print(json.dumps("hello"))
print(json.dumps(42))
print(json.dumps(31.76))
print(json.dumps(True))
print(json.dumps(False))
print(json.dumps(None))

#Convert a Python object containing all the legal data types:

x = {
  "name": "Amulya",
  "age": "10",
  "married": False,
  "siblings": "1",
  "pets": None,
  "cars": [
    {"model": "something toyota"},
    {"model": "something honda"}
  ]
}
print(json.dumps(x))

#The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.
#The json.dumps() method has parameters to make it easier to read the result:

#Use the indent parameter to define the numbers of indents:
print(json.dumps(x, indent=4))

#Use the separators parameter to change the default separator:

print(json.dumps(x, indent=4, separators=(". ", " = ")))

#Use the sort_keys parameter to specify if the result should be sorted or not:
print(json.dumps(x, indent=4, sort_keys=True, separators=(". ", " = ")))
print(json.dumps(x, indent=4, sort_keys=False, separators=(". ", " = ")))
