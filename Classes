#a class is used to like be a "blueprint" for different objects. So like basically bundling data from the objects

#if you want to make a new object in a class you have to use the init function again

#regular class
class myclass:
  x = 5
print(myclass)

# we can make objects in a class and give them a value
p1 = myclass()
print(p1.x)

#the _init_() fucntion

#the init function is used to assign value to objects in classes

#here is how you can use the init function

#a class named person
class Person:
#self is just to define the object so in my case self is defining name and age by saying self.name and self.age
  def __init__(self, name,age):
    self.name = name
    self.age = age

p1 = Person('amulya',10)

print(p1.name)
print(p1.age)

#just a quick explanation of what the __init__() function does
#the __init__() function is used to put a value to an object like self.name or self.age in a class






#next thing is about object methods
#object methods is basically a function in a object so in my case a function in a init function which is basically a object

class hello:
  #making a object with self.name and self.age
  def __init__(self, name, age):
    self.name = name
    self.age = age
#a function that has a perameter thats called self
  def myfunc(self):
    #printing the string with self.name
    print('hello my name is: ' + self.name)
#showing the name and the age
hq = hello('amulya', 10)
#putting the command with the function
hq.myfunc()

#another example

#you do not have to call your paremeters "self" you can call it aything you want

class hola:
  def __init__(example, name , age):
    example.name = name
    example.age = age

  def ex(n):
    print('hello my name is: ' + n.name)

a1 = hola('Amulya',10)

a1.ex()


#you can also do this
class hi:
  def __init__(self, name ,age):
    self.name = name
    self.age = age
  
  
  def e(self):
    
   print('hi! My name is ' + self.name)
  
x = hi('amulya',10)

x.age = 21



x.e()

  
print(x.age)
  
